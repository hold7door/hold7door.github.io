<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>openresty on Arpit Pathak</title><link>https://hold7door.github.io/tags/openresty/</link><description>Recent content in openresty on Arpit Pathak</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Copyright notice</copyright><lastBuildDate>Sun, 05 Jun 2022 00:01:58 +0530</lastBuildDate><atom:link href="https://hold7door.github.io/tags/openresty/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing domain based Multi-tenancy - 2</title><link>https://hold7door.github.io/posts/post-4/</link><pubDate>Sun, 05 Jun 2022 00:01:58 +0530</pubDate><guid>https://hold7door.github.io/posts/post-4/</guid><description>In the previous post I showed you how to set up a NextJs application to serve pages based on users custom domain.
If you haven&amp;rsquo;t read the previous article follow here for Part 1. Otherwise please continue reading
The main problem now remains is to dynamically provision HTTPS certificates for the newly created domains so that data can be served over TLS. For this we use Openresty which is wrapper around Nginx and provides inbuilt support for Lua programming language.</description></item><item><title>Implementing domain based Multi-tenancy - 1</title><link>https://hold7door.github.io/posts/post-3/</link><pubDate>Sat, 19 Feb 2022 02:01:58 +0530</pubDate><guid>https://hold7door.github.io/posts/post-3/</guid><description>In normal scenerios, you build a web-application and host it on a server. Then you purchase a domain which you then link to this server&amp;rsquo;s IP. Other users can then access the web-application using this domain of yours.
However, often times you also want to give the users the ability to map their own domains to a web application which is hosted on a server which you control. Now the users can open the web-application on their own domains as well.</description></item></channel></rss>